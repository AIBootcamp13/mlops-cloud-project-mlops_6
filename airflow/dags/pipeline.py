import os

from datetime import datetime, timedelta, date
from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.decorators import dag, task
from airflow.providers.amazon.aws.hooks.s3 import S3Hook
from airflow.utils.log.logging_mixin import LoggingMixin
from botocore.exceptions import ClientError, EndpointConnectionError
    
#from src.dataset.house_pricing import get_datasets 
from src.dataset.movie_rating import get_datasets 
from src.utils import config   
from src.utils.constant import Models
from src.preprocessing.tmdb_collector import TMDBCollector, collect_all_movies, collect_movie_details


def upload_to_minio(filename:str, key:str, bucket_name:str='futurecraft'):

    hook = S3Hook('minio_conn')
    hook.load_file(
        filename=filename,
        key=key,
        bucket_name='futurecraft',
        replace=True
    )
    
    print(f"Uploaded {filename} to s3://{bucket_name}/{key}") 

def make_data() -> None:

     # API_KEY: TMDB에서 발급받은 본인 API 키 입력
    API_KEY = 'API_KEY'  # 본인의 API 키를 사용하세요
    col = TMDBCollector(API_KEY)

    today = date.today()
    # 최근 5년치만 수집 (예: 2020~2024)
    start_year = today.year - 5
    end_year = today.year

    # 1. 연도별 영화 ID 수집 (연도당 최대 10,000개 제한, TMDB 정책상 10,000개 이상 불가)
    ids = collect_all_movies(col, start_year, end_year, max_per_year=200)

    # 2. 각 영화에 대한 상세 정보 수집
    all_details, filename = collect_movie_details(col, ids)
    print("모든 수집 완료:", len(all_details), "편")

    key = os.path.basename(filename)
    param={
            'filename': filename,
            'key': key,
            'bucket_name': 'futurecraft'
        }

    upload_to_minio(**param)


def download_from_minio(key: str, bucket_name: str, local_filename: str) -> None:
    """S3 버킷에서 로컬로 파일 다운로드"""
    
    # 기존 파일이 있으면 삭제
    if os.path.exists(local_filename+key):
        os.remove(local_filename+key)

    hook = S3Hook('minio_conn')
    try:
        hook.download_file(
            key=key,
            bucket_name=bucket_name,
            local_path=local_filename,
            preserve_file_name=True,
            use_autogenerated_subdir=False
        )
    except ClientError as e:
        LoggingMixin().log.error(f"Error downloading file: {e.response['Error']['Message']}")
    except Exception as e:
        LoggingMixin().log.error(f"Unexpected error: {str(e)}")  
  
    print(f"Downloaded s3://{bucket_name}/{key} to {local_filename}")

def train(key: str, bucket_name: str, local_filename: str, model_name: str, num_epochs: int) -> None:
    
    filePath = local_filename + key
    train_dataset, val_dataset, test_dataset = get_datasets(filePath=filePath)

    # 모델 생성 MovieRatingPredictor
    model_params = {
    "input_dim": train_dataset.features_dim,
    "num_classes": None,
    "hidden_dim": 64,
    }

    model_class = Models[model_name.upper()].value  # Models -> MOVIE_RATING_PREDICTOR = MovieRatingPredictor
    model = model_class(**model_params, train_dataset=train_dataset, val_dataset=val_dataset, test_dataset=test_dataset)

    train_loss = model.train_lgbm()
    print("train_loss=", train_loss)
    
    filename = model.save_model(model_params, num_epochs, train_loss, train_dataset.scaler, train_dataset.label_encoders, train_dataset.mlb_genres, train_dataset.mlb_keywords) 
    key = os.path.basename(filename)
    
    param={
            'filename': filename,
            'key': key,
            'bucket_name': 'futurecraft'
        }

    upload_to_minio(**param)

    """ try:
        os.remove(filename)
    except FileNotFoundError:
        print(f"{filename} 파일이 없습니다.")
    except OSError as e:
        print(f"오류: {filename} : {e.strerror}") """


def print_msg() ->None:

    print('task Success!')    


# 기본 설정
default_args = {
    'owner': 'korea202',
    'retries': 3,
    'retry_delay': timedelta(minutes=5),
}

with DAG(
    dag_id='data_workflow_v21',
    default_args=default_args,
    description='데이터 생성/가공 모델 학습/배포 파이프라인',
    schedule_interval="0 0 * * *",
    start_date=datetime(2025, 6, 1),
    catchup=False,
) as dag:

    current_date = date.today().strftime("%Y%m%d")

    # 1. 데이터 생성/가공/저장
    make_data_task = PythonOperator(
        task_id='make_data',
        python_callable=make_data,
    )

    # 2. 데이터 다운로드
    download_task = PythonOperator(
        task_id='download_data',
        python_callable=download_from_minio,
        op_kwargs={
            'key': "TMDB_" + current_date + ".csv",
            'bucket_name': 'futurecraft',
            'local_filename': config.DATA_ROOT  # 다운로드받을 경로
        }
    )

    # 3. 모델 학습/배포
    train_task = PythonOperator(
        task_id='train',
        python_callable=train,
        op_kwargs={
            'key': "TMDB_" + current_date + ".csv",
            'bucket_name': 'futurecraft',
            'local_filename': config.DATA_ROOT,  # 다운로드받을 경로
            'model_name': 'movie_rating_predictor',
            'num_epochs' : 1
        }
    )

    # 4. 작업완료 메시지
    print_task = PythonOperator(
        task_id='print_message',
        python_callable=print_msg,
    )

    make_data_task >> download_task >> train_task >> print_task